@using School.Shared.Transferencia.Modelos.GradoAggregament.Response

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public List<Grado>? GradosPendientes { get; set; }
    [Parameter] public EventCallback<int> OnGradoSelected { get; set; }

    private int? selectedGrado;

    private void Close()
    {
        IsVisible = false;
        IsVisibleChanged.InvokeAsync(IsVisible);
    }

    private async Task SelectGrado()
    {
        if (selectedGrado.HasValue)
        {
            await OnGradoSelected.InvokeAsync(selectedGrado.Value);
            Close();
        }
    }

}

@if (IsVisible)
{
    <div class="modal-overlay" @onclick="Close">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h4>Seleccione el grado a añadir</h4>
            <InputSelect @bind-Value="selectedGrado" class="form-select">
                <option value="">--Seleccione--</option>
                @if (GradosPendientes != null && GradosPendientes.Any())
                {
                    @foreach (var grado in GradosPendientes)
                    {
                        <option value="@grado.id">@grado.descripcion</option>
                    }
                }
            </InputSelect>
            <div class="mt-3">
                <button class="btn btn-primary" @onclick="SelectGrado">Añadir</button>
                <button class="btn btn-secondary" @onclick="Close">Cancelar</button>
            </div>
        </div>
    </div>
}

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        width: 400px;
        max-width: 100%;
    }
</style>
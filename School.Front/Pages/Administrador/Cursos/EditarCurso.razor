@page "/curso/editar"
@using System.Text.Json
@using School.Shared
@using School.Shared.Service
@using School.Shared.Transferencia.Modelos
@using School.Front.Layout.View
@using School.Shared.Service.General.Grados
@using School.Shared.Service.General.Sedes
@using School.Shared.Transferencia.Modelos.CursoAggregament.Request
@using School.Shared.Transferencia.Modelos.GradoAggregament.Response
@using School.Shared.Transferencia.Modelos.Sede

<PageTitle>Cursos</PageTitle>

<h1>Curso</h1>

<p>Permite el editar el curso.</p>

@if (search && string.IsNullOrWhiteSpace(errorMesage))
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    if (!string.IsNullOrWhiteSpace(errorMesage))
    {
        <ErrorView UserMessage="@errorMesage" DevMessage="@errorMesage"></ErrorView>
    }
    else
    {
        <div class="container mt-4">
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <a href="/sede/editar/@IdCurso/add/profesor" class="btn btn-success">Asignar profesor</a>
                </div>
                <div>
                    <a href="/sede/editar/@IdCurso/add/estudiante" class="btn btn-success">Añadir estudiante</a>
                </div>
            </div>

            <EditForm Model="cursoRegistrar" OnSubmit="Submit" class="container mt-4">
                <div class="form-group">
                    <label for="name">Nombre</label>
                    <InputText id="name" @bind-Value="cursoRegistrar.descripcion" class="form-control mb-3" placeholder="Ingrese el nombre del curso"/>
                </div>
                <button type="submit" class="btn btn-primary">Guardar registro</button>
            </EditForm>
        </div>
    }
}

@code {

    [Parameter] public string IdCurso { get; set; }

    private bool search { get; set; }
    private CrearCursoSpec cursoRegistrar = new();

    private Colegio? ColegioRegistrado;

    private List<SedeColegio>? sedesRegistradas;

    private List<Grado>? Grados { get; set; }

    private string? errorMesage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            search = true;
            await BuscarColegio();
            await ConsultarGrados();
            await ConsultarSedes();
            search = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMesage = ex.Message;
        }
    }

    private async Task BuscarColegio()
    {
        var response = await ApiClient.ConsultarRegistros("colegios", CommonValues.IdColegio);
        if (string.IsNullOrWhiteSpace(response.Data))
        {
            errorMesage = "La consulta del objeto a visualizar presento algún error, por favor vuelvalo a intentar";
            StateHasChanged();
            return;
        }

        ColegioRegistrado = JsonSerializer.Deserialize<Colegio>(response.Data);
    }

    private async Task ConsultarGrados()
    {
        var response = await ServiceGrado.BuscarGrados();
        if (response.status)
        {
            Grados = response.Grados;
        }
    }

    private async Task ConsultarSedes()
    {
        var response = await ServiceSede.BuscarSedes();
        if (response.status)
        {
            sedesRegistradas = response.sedes;
        }
    }

    /// <summary>
    ///     Permite la creación de un curso
    /// </summary>
    private async Task Submit()
    {
        cursoRegistrar.anio_vigencia = DateTime.Now.Year;
        var response = await ApiClient.CrearRegistro("cursos", cursoRegistrar);

        if (response.Success)
        {
        }
    }

}